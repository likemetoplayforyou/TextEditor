

101.1111111

1 * 2^2 + 0 * 2^1 + 1 * 2^0   |+|   1 * 2^-1 + 1 * 2^-2


if bit = 1 then
  range = 
[0,1,2,3,4,5,6,7,8,9]


destDigit := FDestBase div FSourceBase * srcDigit ... FDestBase div FSourceBase * (srcDigit + 1) - 1 + Sign(FDestBase mod FSourceBase)

3 -> 10
0 -> 0
1 -> 3
2 -> 6

0.11
d := 10 div 2 * 1 = 5..9
d := 7..9
d := 9


[0,1,2,3,4,5,6,7,8]

[0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F]

[0,1,2,3,4,5,6,7,8,9,A,B,C,D,E]

[0,1,2]

SrcBase	DstBase	srcDigit	Lt	Rt
3	16	0	0	5
3	16	1	5	A
3	15	0	0	4
3	15	1	5	9


1|3
 |0.33
10
 9
--
 10
-




     0         1*
|         |         |
[0,1,2,3,4,5,6,7,8,9]

   0   1*
|    |    |
[5,6,7,8,9]

 0* 1
|  |  |
[7,8,9]

 0 1
| | |
[7,8]

     0         1
|         |         |
[0,1,2,3,4,5,6,7,8,9]	



      0         1*		InRange	lt	rt
|          |          |
[0,1,2,3,4,5,6,7,8,9,A]	5	5	A

   0     1*
|     |     |
[5,6,7,8,9,A]		2(1/2)	7(1/2)	A

  0*  1		
|   |   |
[7,8,9,A]		1(1/4)	7(1/2)	8(3/4)

 0 1
| | |
[7,8]		(1/2 + 1/8)	7(1/2)	8(1/8)

		(1/4 + 1/16)	7(1/2)	7(1/2 + 1/4 + 1/16)
     0         1
|         |         |
[0,1,2,3,4,5,6,7,8,9]


while lt.IntPart < rt.IntPart do


110/1111





